datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  PROVIDER
  CLIENT
}

model User {
  id                String    @id @unique @default(cuid())
  username          String    @unique
  previousUsernames String[]
  email             String    @unique
  lastActive        DateTime?
  dateOfBirth       String?
  verified          Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  provider  Provider? @relation("provider")
  client    Client?   @relation("client")
  password  Password?
  blockList User[]    @relation("blockList")
  blockedBy User[]    @relation("blockList")
  userRole  UserRole

  @@unique([id, username])
}

model Provider {
  visible Boolean  @default(false)
  status  String   @default("online")
  service String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  listing   Listing?
  voiceNote VoiceNote[]
  tags      Tag[]       @relation("providerTags")

  user     User     @relation("provider", fields: [userId, username], references: [id, username], onDelete: Cascade, onUpdate: Cascade)
  userId   String   @id @unique
  username String   @unique
  Review   Review[]

  @@unique([userId, username])
}

model Client {
  user     User   @relation("client", fields: [userId, username], references: [id, username], onDelete: Cascade, onUpdate: Cascade)
  userId   String @id @unique
  username String @unique

  tags    Tag[]    @relation("clientTags")
  reviews Review[]

  @@unique([userId, username])
}

model Review {
  id        String  @id @default(cuid())
  rating    Int
  comment   String?
  voiceNote String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  provider         Provider @relation(fields: [providerId, providerUsername], references: [userId, username], onDelete: Cascade, onUpdate: Cascade)
  providerId       String
  providerUsername String

  reviewer                 Client @relation(fields: [reviewerId, reviewerUsername], references: [userId, username], onDelete: Cascade, onUpdate: Cascade)
  reviewerId               String
  reviewerUsername         String
  censoredReviewerUsername String

  listing   Listing? @relation(fields: [listingId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  listingId String?
}

model Tag {
  id  String @id @default(cuid())
  tag String @unique

  clients   Client[]   @relation("clientTags")
  providers Provider[] @relation("providerTags")
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Listing {
  id          String   @id @default(cuid())
  name        String
  description String
  age         Int
  gender      String
  pronouns    String[]
  photos      String[]
  thumbnails  String[]
  language    String[]
  location    String

  provider   Provider @relation(fields: [providerId, username], references: [userId, username], onDelete: Cascade, onUpdate: Cascade)
  providerId String   @unique
  username   String   @unique

  reviews     Review[]

  voiceNote    VoiceNote? @relation(fields: [voiceNoteUrl], references: [url], onDelete: Cascade, onUpdate: Cascade)
  voiceNoteUrl String?    @unique

  @@unique([providerId, username])
  @@unique([id, providerId])
}

model VoiceNote {
  id  String @id @default(cuid())
  url String @unique

  provider   Provider @relation(fields: [providerId, username], references: [userId, username], onDelete: Cascade, onUpdate: Cascade)
  providerId String   @unique
  username   String   @unique

  Listing Listing?

  @@unique([providerId, username])
}
