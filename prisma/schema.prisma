datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  PROVIDER
  CLIENT
}

model User {
  id                String    @id @unique @default(cuid())
  username          String    @unique
  previousUsernames String[]
  email             String    @unique
  lastActive        DateTime?
  dateOfBirth       String?
  verified          Boolean   @default(false)

  provider       Provider?
  client         Client?
  password       Password?
  blockList      User[]    @relation("blockList")
  blockedBy      User[]    @relation("blockList")
  userRole       UserRole
  providerUserId String?
  clientUserId   String?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

enum Status {
  ACTIVE
  INACTIVE
  BANNED
}

model Provider {
  id      String   @id @default(cuid())
  visible Boolean  @default(false)
  status  Status?
  service String[]

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  listing   Listing?
  voiceNote VoiceNote[]
  tags      Tag[]
  Review    Review[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model Client {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  tags    Tag[]
  reviews Review[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model Review {
  id        String  @id @default(cuid())
  rating    Int
  comment   String?
  voiceNote String?

  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  providerId String

  reviewer                 Client @relation(fields: [reviewerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  reviewerId               String
  censoredReviewerUsername String

  listing   Listing? @relation(fields: [listingId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  listingId String?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model Tag {
  id  String @id @default(cuid())
  tag String @unique

  clients   Client[]
  providers Provider[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
  TRANS
}

model Listing {
  id          String   @id @default(cuid())
  name        String
  description String
  age         Int
  gender      Gender?
  pronouns    String[]
  photos      String[]
  thumbnails  String[]
  language    String[]
  location    String

  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  providerId String   @unique

  reviews Review[]

  voiceNote   VoiceNote? @relation(fields: [voiceNoteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  voiceNoteId String?    @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}

model VoiceNote {
  id  String @id @default(cuid())
  url String @unique

  provider   Provider @relation(fields: [providerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  providerId String   @unique

  Listing Listing?

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?
}
